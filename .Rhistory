library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<- c (1.1, 9, 3.14)
?c
z
z<-555
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
mydiv <-z / my_sqrt
mydiv <- z / my_sqrt
my_div <- z / my_sqrt
my_div
a <- c(1,2,3,4)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
character(cls_list)
as.character(cls_list)
?sapply
sapply()
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head()
head.flags()
?head
head(flags)
head(flag_colors)
cls_list <- lapply(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, min, max)
lapply(flag_shapes, min)
lapply(flag_shapes, range)
sapply(flag_mat, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat()
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lappy(unique(),)
unique_vals <- lapply(unique(),)
unique_vals <- lapply(unique,)
unique_vals <- lapply(unique,class)
unique_vals <- lapply(flags, unique)
unique_vals
unique_vals <- sapply(flags, length)
unique_vals <- sapply(flags, length())
sapply(unique_vals, length)
sapply(unique(),)
sapply(unique,)
unique_vals <- sapply(unique,)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
bye()
quit
quit()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args()
list.files()
args(list.files)
args("old.dir")
setwd("old.dir")
args(list.files,"old.dir")
list.files("old.dir")
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
list.exists()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file rename("mytest.R" "mytest2.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
args (folder1,folder2)
args ('folder1','folder2')
args ('folder1')
folder1 <- args()
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink(('testdir2', 'testdir3'), recursive = TRUE))
unlink('testdir2', 'testdir3'), recursive = TRUE
unlink('testdir2'), recursive = TRUE
unlink('testdir2')
unlink("testdir2", recursive = TRUE)
setwd()
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
my_seq <-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-0.5, 55, -10, and 6
num_vect<- 0.5, 55, -10, 6
num_vect(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf<- c(num_vect < 1)
tf<- num_vect < 1
tf()
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "dida")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z") sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
bye()
quit()
swirl()
library(swirl)
swirl()
bye
exit
exit()
?exit
bye
data(cars)
0
0
exit
n
bye
info()
bye()
getwd()
getwd()
if (!file.exists("data"))
{ dir.create("data")
}
fileURL<-"https://www.google.com/finance?q=NASDAQ%3AAAPL&ei=ykGKVaPlPMSsugS66bOIAw"
download.file(fileURL, destfile=("./data/apple.csv"))
setwd("~/GitHub/module3")
if (!file.exists("data"))
{ dir.create("data")
}
fileURL<-"https://www.google.com/finance?q=NASDAQ%3AAAPL&ei=ykGKVaPlPMSsugS66bOIAw"
download.file(fileURL, destfile=("./data/apple.csv"))
list.files("./data")
if (!file.exists("data"))
{ dir.create("data")
}
fileURL<-"https://www.google.com/finance?q=NASDAQ%3AAAPL&ei=ykGKVaPlPMSsugS66bOIAw"
download.file(fileURL, destfile=("./data/apple.csv"))
list.files("./data")
##ex2
fileURL2<-"http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx"
download.file(fileURL2, destfile=("./data/passengers.xlsx"))
list.files("./data")
##ex2
fileURL2<-"http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx"
download.file(fileURL2, destfile=("./data/passengers.xlsx")), mode = "wb"
list.files("./data")
##ex2
fileURL2<-"http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx"
download.file(fileURL2, destfile=("./data/passengers.xlsx")), mode = "wb";
list.files("./data")
fileURL2<-"http://data.gov.my/folders/MOT/penumpang_mengikut_lapangan_terbang_tidak_termasuk_penumpang_transit.xlsx"
download.file(fileURL2, destfile=("./data/passengers.xlsx"), mode = "wb");
list.files("./data")
##ex3
## delimiter (data separated by , or ; as in the column)
comma_dat<- read.table("http://bit.ly/le9Cvzu", header =TRUS, sep = ",")
comma_dat<- read.table("http://bit.ly/le9Cvzu", header =TRUE, sep = ",")
comma_dat<- read.table("http://bit.ly/le9Cvzu", header =TRUE, sep = ",")
comma_dat<- read.table("http://bit.ly/1e9Cvzu", header =TRUE, sep = ",")
semi_dat<- read.table("http://bit.ly/1RGbPn9", header =TRUE, sep = ";")
comma_dat<- read.table("http://bit.ly/1e9Cvzu", header=TRUE, sep = ",")
semi_dat<- read.table("http://bit.ly/1RGbPn9", header=TRUE, sep = ";")
comma_dat<- read.table("http://bit.ly/1e9Cvzu" , header=TRUE, sep = ",")
semi_dat<- read.table("http://bit.ly/1RGbPn9" , header=TRUE, sep = ";")
comma_dat
semi_dat
comma_dat<- read.table("http://bit.ly/1e9Cvzu" , header=TRUE, sep = ",")
comma_dat
semi_dat<- read.table("http://bit.ly/1RGbPn9" , header=TRUE, sep = ";")
semi_dat
fileURL<-"hhttp://finance.yahoo.com/q/hp?s=GMALF+Historical+Prices)"
download.file(fileURL, destfile=("./data/genting.csv"))
list.files("./data")
fileURL<-"http://real-chart.finance.yahoo.com/table.csv?s=GMALF&d=6&e=8&f=2015&g=d&a=5&b=18&c=2013&ignore=.csv"
download.file(fileURL, destfile=("./data/genting.csv"))
list.files("./data")
genting<- read.table("./data/genting.csv" , header=TRUE, sep = ",")
genting
str(genting)
names(genting)
genting$close
mean(genting$close)
genting$Close
mean(genting$Close)
a <-genting$Close <1.35
length(genting$Close[genting$Close< 1.35])
length(genting$Close[genting$Close> 1.35])
library(xlsx)
install.packages(xlsx)
install.packages("xlsx")
fileURL4<-"https://d396qusza40orc.cloudfront.net/getdata/data/DATA.gov_NGAP.xlsx"
download.file(fileURL4, destfile=("./data/ex4.xlsx"), mode = "wb");
list.files("./data")
xlsdat<- read.xlsx(file, sheetIndex, sheetName=NULL, rowIndex=NULL, startRow=74, endRow=79, colIndex=NULL, startCol=14, endCol=21, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown", ...)
xlsdat<- read.xlsx(file, sheetIndex, sheetName=NULL, rowIndex=NULL, startRow=74, endRow=79, colIndex=NULL, startCol=14, endCol=21, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown")
xlsdat<- read.xlsx(file, sheetIndex, sheetName=NULL, rowIndex=NULL, startRow=74, endRow=79, colIndex=NULL, startCol=14, endCol=21, as.data.frame=TRUE, header=TRUE, colClasses=NA, keepFormulas=FALSE, encoding="unknown")
fileURL4<-"https://d396qusza40orc.cloudfront.net/getdata/data/DATA.gov_NGAP.xlsx"
download.file(fileURL4, destfile=("./data/DATA.gov_NGAP.xlsx"), mode = "wb");
list.files("./data")
xlsdat
library(xlsx)
fileURL4<-"https://d396qusza40orc.cloudfront.net/getdata/data/DATA.gov_NGAP.xlsx"
download.file(fileURL4, destfile=("./data/DATA.gov_NGAP.xlsx"), mode = "wb");
list.files("./data")
xlsdat
install.package("rJava")
sum(xlsdat$Supp_Vol*xlsdat$Supp_Org_Cost)
colIndex<-14:21
xlsdat<-read.xlsx(".data/exercise4.xlsx",sheetIndex =1, header=TRUE, colIndex=colIndex, rowIndex =rowIndex )
rowIndex <-74:79
library(xlsx)
library(xlsx)
fileURL4<-"https://d396qusza40orc.cloudfront.net/getdata/data/DATA.gov_NGAP.xlsx"
list.files("./data")
sum(xlsdat$Supp_Vol*xlsdat$Supp_Org_Cost)
library(xlsx)
fileURL4<-"https://d396qusza40orc.cloudfront.net/getdata/data/DATA.gov_NGAP.xlsx"
download.file(fileURL4, destfile=("./data/DATA.gov_NGAP.xlsx"), mode = "wb");
list.files("./data")
sum(xlsdat$Supp_Vol*xlsdat$Supp_Org_Cost)
colIndex<-14:21
rowIndex <-74:79
xlsdat<-read.xlsx(".data/DATA.gov_NGAP.xlsx",sheetIndex =1, header=TRUE, colIndex=colIndex, rowIndex =rowIndex )
xlsdat<-read.xlsx("./data/DATA.gov_NGAP.xlsx",sheetIndex =1, header=TRUE, colIndex=colIndex, rowIndex =rowIndex )
sum(xlsdat$Supp_Vol*xlsdat$Supp_Org_Cost)
install.packages("XML")
library("XML")
fileURL5<-"http://www.yr.no/place/Malaysia/Kuala_Lumpur/Kuala_Lumpur/forecast_hour_by_hour.xml"
download.file(fileURL5, destfile=("./data/forecast_hour_by_hour.xml"), mode = "wb");
list.files("./data")
library("data.table")
install.packages("data.table")
library("data.table")
DF <- data.frame(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DT <- data.table(x=rep(c("a","b","c"),each=3), y=c(1,3,6), v=1:9)
DF
DT
class(DF)
class(DT)
DT[3:5]
DF[3:5]
DF[3:5,]
DF[3:5,1] ## have to have comma to select column
DF[3:5,2] ## have to have comma to select column
DT[]DT$x=="a"]
DT[DT$x=="a"]
DT[x=="a"]
DT[DT$x=="a",]
DT[x=="a"]
DT[$x=="a"]
DT[x="a"]
DF[DF$x=="a",]
DF[DF$x=="a",]
DF[c(1,3,7),]
DF[c(1,3,7)]
DF[,2]
DT[,2] ##will run function
DT[,list(mean(y), sum(v))] #mean y
DT[,.(length(x), sum(y))] # .() is same as list()
DT[,.(max(y), mean(v))]
DT[,plot(y,v)]
DT[, for(x in 1:10) print(x)]
DT[,sum(v),by=x]
DT
install.packages("XML")
library("XML")
library("XML")
fileURL5<-"http://www.yr.no/place/Malaysia/Kuala_Lumpur/Kuala_Lumpur/forecast_hour_by_hour.xml"
download.file(fileURL5, destfile=("./data/forecast_hour_by_hour.xml"), mode = "wb");
download.file(fileURL5, destfile=("./data/forecast_hour_by_hour.xml"), mode = "wb");
list.files("./data")
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
rootNode <-xmlRoot(doc)
xmlName(rootNode)
mean(xpathSApply(doc,"//temperature/@value",as.numeric))
install.packages("XML")
library("XML")
fileURL5<-"http://www.yr.no/place/Malaysia/Kuala_Lumpur/Kuala_Lumpur/forecast_hour_by_hour.xml"
doc <- xmlTreeParse(fileURL, useInternal = TRUE)
doc<-xmlTreeParse(fileURL, useInternal = TRUE)
doc<-xmlTreeParse(fileURL5, useInternal = TRUE)
rootNode <-xmlRoot(doc)
xmlName(rootNode)
mean(xpathSApply(doc,"//temperature/@value",as.numeric))
exit
exit()
setwd("~/GitHub/module3/assignment1")
## You should create one R script called run_analysis.R that does the following.
## Merges the training and the test sets to create one data set.
## Extracts only the measurements on the mean and standard deviation for each measurement.
## Uses descriptive activity names to name the activities in the data set
## Appropriately labels the data set with descriptive variable names.
## From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Source of data for this project: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# This R script does the following:
# 1. Merges the training and the test sets to create one data set.
tmp1 <- read.table("train/X_train.txt")
tmp2 <- read.table("test/X_test.txt")
X <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/subject_train.txt")
tmp2 <- read.table("test/subject_test.txt")
S <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/y_train.txt")
tmp2 <- read.table("test/y_test.txt")
Y <- rbind(tmp1, tmp2)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("features.txt")
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, indices_of_good_features]
names(X) <- features[indices_of_good_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
# 3. Uses descriptive activity names to name the activities in the data set.
activities <- read.table("activity_labels.txt")
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity"
# 4. Appropriately labels the data set with descriptive activity names.
names(S) <- "subject"
cleaned <- cbind(S, Y, X)
write.table(cleaned, "merged_clean_data.txt")
# 5. Creates a 2nd, independent tidy data set with the average of each variable for each activity and each subject.
uniqueSubjects = unique(S)[,1]
numSubjects = length(unique(S)[,1])
numActivities = length(activities[,1])
numCols = dim(cleaned)[2]
result = cleaned[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = activities[a, 2]
tmp <- cleaned[cleaned$subject==s & cleaned$activity==activities[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "data_set_with_the_averages.txt")
tmp1 <- read.table("train/X_train.txt")
tmp2 <- read.table("test/X_test.txt")
X <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/subject_train.txt")
tmp2 <- read.table("test/subject_test.txt")
S <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/y_train.txt")
tmp2 <- read.table("test/y_test.txt")
Y <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/X_train.txt")
tmp2 <- read.table("test/X_test.txt")
X <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/subject_train.txt")
tmp2 <- read.table("test/subject_test.txt")
S <- rbind(tmp1, tmp2)
tmp1 <- read.table("train/y_train.txt")
tmp2 <- read.table("test/y_test.txt")
Y <- rbind(tmp1, tmp2)
features <- read.table("features.txt")
indices_of_good_features <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
X <- X[, indices_of_good_features]
names(X) <- features[indices_of_good_features, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
activities <- read.table("activity_labels.txt")
activities[, 2] = gsub("_", "", tolower(as.character(activities[, 2])))
Y[,1] = activities[Y[,1], 2]
names(Y) <- "activity"
names(S) <- "subject"
cleaned <- cbind(S, Y, X)
write.table(cleaned, "merged_clean_data.txt")
uniqueSubjects = unique(S)[,1]
numSubjects = length(unique(S)[,1])
numActivities = length(activities[,1])
numCols = dim(cleaned)[2]
result = cleaned[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = activities[a, 2]
tmp <- cleaned[cleaned$subject==s & cleaned$activity==activities[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "data_set_with_the_averages.txt")
uniqueSubjects = unique(S)[,1]
numSubjects = length(unique(S)[,1])
numActivities = length(activities[,1])
numCols = dim(cleaned)[2]
result = cleaned[1:(numSubjects*numActivities), ]
row = 1
for (s in 1:numSubjects) {
for (a in 1:numActivities) {
result[row, 1] = uniqueSubjects[s]
result[row, 2] = activities[a, 2]
tmp <- cleaned[cleaned$subject==s & cleaned$activity==activities[a, 2], ]
result[row, 3:numCols] <- colMeans(tmp[, 3:numCols])
row = row+1
}
}
write.table(result, "data_set_with_the_averages.txt")
